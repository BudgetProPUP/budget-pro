# Generated by Django 5.2 on 2025-06-18 11:28

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='BudgetProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('project_summary', models.TextField()),
                ('project_description', models.TextField()),
                ('performance_notes', models.TextField(blank=True, help_text='Narrative description of the period of performance.')),
                ('submitted_by_name', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='SUBMITTED', max_length=20)),
                ('performance_start_date', models.DateField()),
                ('performance_end_date', models.DateField()),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('approved_by_name', models.CharField(blank=True, max_length=255, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('rejected_by_name', models.CharField(blank=True, max_length=255, null=True)),
                ('rejection_date', models.DateTimeField(blank=True, null=True)),
                ('external_system_id', models.CharField(help_text='ID reference from the external help desk system', max_length=100, unique=True)),
                ('last_sync_timestamp', models.DateTimeField(blank=True, help_text='When this proposal was last synced with the external system', null=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('FAILED', 'Failed'), ('PENDING', 'Pending'), ('RETRYING', 'Retrying')], default='PENDING', max_length=50)),
                ('document', models.FileField(blank=True, help_text='Optional file attached with the proposal, such as an Excel budget sheet.', null=True, upload_to='budget_proposals/documents/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'default_permissions': ('change', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_id', models.CharField(editable=False, max_length=50, unique=True)),
                ('category', models.CharField(choices=[('EXPENSES', 'Expenses'), ('ASSETS', 'Assets'), ('PROJECTS', 'Projects'), ('VENDOR_CONTRACTS', 'Vendor & Contracts')], max_length=100)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('POSTED', 'Posted')], default='DRAFT', max_length=20)),
                ('created_by_user_id', models.IntegerField(help_text='ID of user from Auth Service')),
                ('created_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('EXPENSE', 'Expense'), ('JOURNAL_ENTRY', 'Journal Entry'), ('TRANSFER', 'Transfer')], max_length=20)),
                ('transaction_id_ref', models.IntegerField()),
                ('user_id', models.IntegerField(help_text='ID of user from Auth Service related to audit')),
                ('user_username', models.CharField(help_text='Username of user (denormalized)', max_length=150)),
                ('action', models.CharField(choices=[('CREATED', 'Created'), ('UPDATED', 'Updated'), ('DELETED', 'Deleted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(help_text='ID of user from Auth Service who performed action')),
                ('user_username', models.CharField(help_text='Username of user (denormalized)', max_length=150)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('log_type', models.CharField(choices=[('LOGIN', 'Login'), ('EXPORT', 'Export'), ('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('PROCESS', 'Process'), ('ERROR', 'Error')], max_length=30)),
                ('action', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('IN_PROGRESS', 'In Progress')], max_length=20)),
                ('details', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_by_user_id', models.IntegerField(help_text='ID of the user from Auth Service who created this account')),
                ('created_by_username', models.CharField(blank=True, help_text='Username of the creator (denormalized)', max_length=150, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accomplished', models.BooleanField(default=False)),
                ('accomplishment_date', models.DateField(blank=True, null=True)),
                ('parent_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_accounts', to='core.account')),
                ('account_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.accounttype')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetProposalItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_element', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.account')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.budgetproposal')),
            ],
        ),
        migrations.AddField(
            model_name='budgetproposal',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.department'),
        ),
        migrations.CreateModel(
            name='ExpenseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='core.expensecategory')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by_name', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(help_text='The account this allocation funds.', on_delete=django.db.models.deletion.PROTECT, related_name='allocations', to='core.account')),
                ('proposal', models.ForeignKey(blank=True, help_text='Optional link back to the originating proposal (if this allocation was approved from one).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocations', to='core.budgetproposal')),
                ('department', models.ForeignKey(help_text='The department receiving this budget allocation.', on_delete=django.db.models.deletion.PROTECT, related_name='allocations', to='core.department')),
                ('category', models.ForeignKey(help_text='The expense category this allocation is intended for', on_delete=django.db.models.deletion.PROTECT, related_name='budget_allocations', to='core.expensecategory')),
            ],
            options={
                'ordering': ['department', 'account'],
            },
        ),
        migrations.CreateModel(
            name='FiscalYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_locked', models.BooleanField(default=False)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('end_date__gt', models.F('start_date'))), name='check_end_date_after_start_date')],
            },
        ),
        migrations.CreateModel(
            name='DashboardMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(max_length=100)),
                ('value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('status', models.CharField(max_length=50)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('warning_threshold', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('critical_threshold', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.department')),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.fiscalyear')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transferred_by_user_id', models.IntegerField(help_text='ID of user from Auth Service')),
                ('transferred_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('reason', models.TextField()),
                ('transferred_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('approved_by_user_id', models.IntegerField(blank=True, help_text='ID of user from Auth Service', null=True)),
                ('approved_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('rejected_by_user_id', models.IntegerField(blank=True, help_text='ID of user from Auth Service', null=True)),
                ('rejected_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('rejection_date', models.DateTimeField(blank=True, null=True)),
                ('destination_allocation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transfers_to', to='core.budgetallocation')),
                ('source_allocation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transfers_from', to='core.budgetallocation')),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.fiscalyear')),
            ],
        ),
        migrations.AddField(
            model_name='budgetproposal',
            name='fiscal_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.fiscalyear'),
        ),
        migrations.AddField(
            model_name='budgetallocation',
            name='fiscal_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.fiscalyear'),
        ),
        migrations.CreateModel(
            name='JournalEntryLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('transaction_type', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], max_length=10)),
                ('journal_transaction_type', models.CharField(choices=[('CAPITAL_EXPENDITURE', 'Capital Expenditure'), ('OPERATIONAL_EXPENDITURE', 'Operational Expenditure'), ('TRANSFER', 'Transfer')], max_length=30)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.account')),
                ('journal_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='core.journalentry')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('PLANNING', 'Planning'), ('IN_PROGRESS', 'In Progress'), ('ON_HOLD', 'On Hold'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PLANNING', max_length=20)),
                ('completion_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('budget_proposal', models.OneToOneField(help_text='The approved proposal that spawned this project', on_delete=django.db.models.deletion.PROTECT, related_name='project', to='core.budgetproposal')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.department')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(editable=False, max_length=50, unique=True)),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('description', models.TextField()),
                ('vendor', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('receipt', models.FileField(blank=True, null=True, upload_to='receipts/')),
                ('submitted_by_user_id', models.IntegerField(help_text='ID of user from Auth Service')),
                ('submitted_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('posting_date', models.DateField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='DRAFT', max_length=20)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.account')),
                ('budget_allocation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.budgetallocation')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.department')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='expenses', to='core.expensecategory')),
                ('project', models.ForeignKey(blank=True, help_text='If this expense is specific to a project, link it here.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='expenses', to='core.project')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='documents/')),
                ('document_type', models.CharField(choices=[('RECEIPT', 'Receipt'), ('PROPOSAL', 'Budget Proposal'), ('CONTRACT', 'Contract'), ('OTHER', 'Other')], max_length=20)),
                ('name', models.CharField(max_length=255)),
                ('uploaded_by_user_id', models.IntegerField(help_text='ID of user from Auth Service')),
                ('uploaded_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.department')),
                ('proposal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.budgetproposal')),
                ('expense', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.expense')),
                ('project', models.ForeignKey(blank=True, help_text='Optional link for project-specific docs.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.project')),
            ],
        ),
        migrations.AddField(
            model_name='budgetallocation',
            name='project',
            field=models.OneToOneField(help_text='The one budget allocation for this project.', on_delete=django.db.models.deletion.CASCADE, related_name='budget', to='core.project'),
        ),
        migrations.CreateModel(
            name='ProjectFiscalYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fiscal_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.fiscalyear')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='fiscal_years',
            field=models.ManyToManyField(related_name='projects', through='core.ProjectFiscalYear', to='core.fiscalyear'),
        ),
        migrations.CreateModel(
            name='ProposalComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_id', models.IntegerField(help_text='ID of user from Auth Service who commented')),
                ('user_username', models.CharField(help_text='Username of commenter (denormalized)', max_length=150)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.budgetproposal')),
            ],
        ),
        migrations.CreateModel(
            name='ProposalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATED', 'Created'), ('SUBMITTED', 'Submitted'), ('REVIEWED', 'Reviewed'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('UPDATED', 'Updated')], max_length=20)),
                ('action_by_name', models.CharField(blank=True, max_length=100, null=True)),
                ('action_at', models.DateTimeField(auto_now_add=True)),
                ('previous_status', models.CharField(blank=True, max_length=20, null=True)),
                ('new_status', models.CharField(blank=True, max_length=20, null=True)),
                ('comments', models.TextField(blank=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='core.budgetproposal')),
            ],
            options={
                'verbose_name_plural': 'Proposal histories',
                'ordering': ['-action_at'],
            },
        ),
        migrations.CreateModel(
            name='RiskMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_type', models.CharField(choices=[('BUDGET', 'Budget'), ('TIMELINE', 'Timeline'), ('RESOURCES', 'Resources'), ('QUALITY', 'Quality')], max_length=20)),
                ('risk_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('description', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by_user_id', models.IntegerField(help_text='ID of user from Auth Service')),
                ('updated_by_username', models.CharField(blank=True, max_length=150, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_metrics', to='core.project')),
            ],
        ),
        migrations.AddConstraint(
            model_name='budgetproposal',
            constraint=models.CheckConstraint(condition=models.Q(('performance_end_date__gt', models.F('performance_start_date'))), name='check_performance_end_date_after_start_date'),
        ),
        migrations.AlterUniqueTogether(
            name='projectfiscalyear',
            unique_together={('project', 'fiscal_year')},
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__gt', models.F('start_date'))), name='check_project_end_date_after_start_date'),
        ),
        migrations.AlterUniqueTogether(
            name='riskmetric',
            unique_together={('project', 'risk_type')},
        ),
    ]
